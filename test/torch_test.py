import torch
import numpy as np

# read data generated by C code
with open('meta.txt', 'r') as f:
    meta_info = f.read()

in_c, in_h, in_w, kn_size, out_c, out_h, out_w, stride, padding = [int(x.split(':')[1]) for x in meta_info.split(', ')]
print(f"Input & Output shape: ({in_c}, {in_h}, {in_w}) -> ({out_c}, {out_h}, {out_w})")
print(f"Kernel size: {kn_size}, stride: {stride}, padding: {padding}")

in_data = torch.from_numpy(np.fromfile("in_buf.bin", dtype=np.float32)).view(1, in_c, in_h, in_w)
kn_data = torch.from_numpy(np.fromfile("kn_buf.bin", dtype=np.float32)).view(out_c, in_c, kn_size, kn_size)
nchw_out_data = torch.from_numpy(np.fromfile("nchw_out.bin", dtype=np.float32)).view(1, out_c, out_h, out_w)
nhwc_out_data = torch.from_numpy(np.fromfile("nhwc_out.bin", dtype=np.float32)).view(1, out_h, out_w, out_c)
# nhwc -> hchw
nhwc_out_data = nhwc_out_data.permute(0, 3, 1, 2)

# conv. layer in pytorch
conv2d = torch.nn.Conv2d(in_c, out_c, kernel_size=kn_size, bias=False, stride=stride, padding=padding)
conv2d.weight.data = kn_data
with torch.no_grad():
    torch_out = conv2d(in_data)

# compare results
torch_out = torch_out.flatten()
nchw_out_data = nchw_out_data.flatten()
nhwc_out_data = nhwc_out_data.flatten()

if torch.allclose(torch_out, nchw_out_data, rtol=1e-5, atol=1e-8):
    print("NCHW PASS")  # all elements within tolerance
else:
    print("NCHW FAIL")  # large difference detected
    print("Show max difference position")
    max_diff, max_idx = torch.max(torch.abs(torch_out - nchw_out_data), dim=0)
    max_idx = max_idx.item()
    for i in range(max(0, max_idx-4), min(len(torch_out), max_idx+5)):
        print(f"nchw_out_data[{i}]: NCHW: {nchw_out_data[i]:-12.8f} | Torch: {torch_out[i]:-12.8f} | Diff: {abs(nchw_out_data[i]-torch_out[i]):.8f}")

if torch.allclose(torch_out, nhwc_out_data, rtol=1e-5, atol=1e-8):
    print("NHWC PASS")
else:
    print("NHWC FAIL")
    print("Show max difference position")
    max_diff, max_idx = torch.max(torch.abs(torch_out - nhwc_out_data), dim=0)
    max_idx = max_idx.item()
    for i in range(max(0, max_idx-4), min(len(torch_out), max_idx+5)):
        print(f"nhwc_out_data[{i}]: NHWC: {nhwc_out_data[i]:-12.8f} | Torch: {torch_out[i]:-12.8f} | Diff: {abs(nhwc_out_data[i]-torch_out[i]):.8f}")

print(f"Checksum: {torch.sum(torch_out):.4f} | {torch.sum(nchw_out_data):.4f} | {torch.sum(nhwc_out_data):.4f}")
